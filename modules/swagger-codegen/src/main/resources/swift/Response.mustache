// Response.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import SwiftyJSON

protocol JSONDecodable {
    static func decode(source: AnyObject) -> Self?
}

protocol JSONEncodable {
    func encode() -> AnyObject
}

final class RangedArray<Entity: JSONDecodable>: JSONDecodable {
    var total: Int?
    var offset: Int?
    var limit: Int?
    var items: [Entity]!

    static func decode(source: AnyObject) -> RangedArray? {
        let json = JSON(source)
        let instance = RangedArray()
        instance.total = json["total"].int
        instance.offset = json["offset"].int
        instance.limit = json["limit"].int
        let rawItems = json["items"].arrayObject!
        let nullableItems = rawItems.map(Entity.decode)
        instance.items = nullableItems.filter({ $0 != nil }).map({ $0! })
        return instance
    }
}

class Response<T: JSONDecodable> {
    let statusCode: Int
    let header: [NSObject: AnyObject]
    let body: T

    init(statusCode: Int, header: [NSObject: AnyObject], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    convenience init(response: NSHTTPURLResponse, body: T) {
        self.init(statusCode: response.statusCode, header: response.allHeaderFields, body: body)
    }
}

final class Empty: JSONDecodable {
    private init() { }

    static let instance = Empty()

    static func decode(source: AnyObject) -> Empty? {
        return instance
    }
}
